snippet af "Anon function"
const $1 = () => {
 $0
};
endsnippet

snippet map "map higher order function" w
map($1 => {
  $2
})
endsnippet

snippet mapin "map higher order function with index" w
map(($1, index) => {
  $2
})
endsnippet

snippet for "foreach higher order function" w
forEach($1 => {
  $2
})
endsnippet

snippet forin "foreach higher order function with index" w
forEach(($1, index) => {
  $2
})
endsnippet

snippet red "reduce higher order function" w
reduce(($1, $2), $3)
endsnippet

snippet return "return" w
return
endsnippet

snippet cl "console log"
console.log($0);
endsnippet

snippet ce "console error"
console.error($0);
endsnippet

snippet ct "console time"
console.time('$0');
endsnippet

snippet cte "console timeEnd"
console.timeEnd('$0');
endsnippet

snippet clog "Console log with an object."
console.log({ $0 });
endsnippet

snippet imp "import"
import $2 from '$1';
endsnippet

snippet cdm "Component did mount"
componentDidMount = ($1) => {
	$2
};
endsnippet

snippet cwm "Component will mount"
componentWillMount = ($1) => {
	$2
};
endsnippet

snippet cwrp "Component Will Receive Props" b
componentWillReceiveProps = nextProps => {
	$1
};
endsnippet

snippet scup "Should Component Update" b
shouldComponentUpdate = (nextProps, nextState) => {
	$1
};
endsnippet

snippet cwup "Component Will Update" b
componentWillUpdate = (nextProps, nextState) => {
	$1
};
endsnippet

snippet cdup "Component Did Update" b
componentDidUpdate = (prevProps, prevState) => {
	$1
};
endsnippet

snippet cwu "Component Will Unmount" b
componentWillUnmount = () => {
	$1
};
endsnippet

snippet prom "A returned promise"
return new Promise((resolve, reject) => {
  $1
});
endsnippet

snippet reduce "A reduce function"
$1.reduce((acc, $2) => {
  $3
});
endsnippet

snippet bcq "A bluecherry query"
const query = new Query('$0');
endsnippet

snippet bcr "A bluecherry route handler"
/**
 * $1
 *
 * @param {object} req Express request object
 * @param {object} res Express response object
 */
const ${1:} = async (req, res) => {
  try {
    $0
  } catch (err) {
    utils.handleErrorV2(err, server.log, res);
  }
};
endsnippet

snippet desc "A mocha describe"
describe('$1', () => {
  $0
});
endsnippet

snippet test "A mocha test"
it('$1', () => {
  $0
});
endsnippet

snippet e2e "An End to end test"
it('$1', async () => {
  const res = await request(app)
    .$2($3)
    .set({
      Authorization: \`Bearer ${jwt}\`,
      'Accept-Bc-Version': 'v1',
    })
    .send();

  assert.equal(res.status, $4);
  assert.isObject(res.body);
  $0
});
endsnippet

snippet bct "A bluecherry test"
it('$1', done => {
  request(express)
    .$2($3)
    .set('Cookie', [\`bc-token=${token}\`])
    .then(res => {
      expect(res.statusCode).to.equal(200);
      $4
      done();
    });
});
endsnippet

snippet canari "A canari test"
describe('Canari test', () => {
  it('Canari test', assert.equal(true, true));
});
endsnippet

snippet expectbody "Expect body to be"
expect(res.body).to.be.an('$0');
endsnippet

snippet haveproperty "expect value to have property"
expect(res.body).to.have.property('$0');
endsnippet

snippet check "A bluecherry check"
const { $1 } = await this.validate.check(req.$0, params);
endsnippet

snippet bcp "A bluecherry param"
this.${1:} = this.param(data, '$1');
$0
endsnippet

snippet bce "A bluecherry error"
throw new BcError(errorCodes.$1, $0);
endsnippet

snippet get "A GET route constructor"
server.get('$1', $0);
endsnippet

snippet post "A POST route constructor"
server.post('$1', $0);
endsnippet

snippet put "A PUT route constructor"
server.put('$1', $0);
endsnippet

snippet delete "A DELETE route constructor"
server.delete('$1', $0);
endsnippet

snippet bli "A bluecherry log"
this.logger.info(\`Account: ${accountId} $0\`);
endsnippet


snippet blw "A bluecherry log"
this.logger.warning('$0');
endsnippet

snippet ble "A bluecherry log"
this.logger.error('$0');
endsnippet

snippet switch "A switch"
switch ($1) {
  case $2:
    $3
  default:
    $0
}
endsnippet

snippet chandler "A Controller handler function"
/**
 * $0
 *
 * @param {Request} req The Express Request object
 * @param {Response} res The Express Response object
 */
${1:} = async (req, res) => {
  const { accountId } = req.tokenBody;

  try {
    res.status(501).json({ message: 'TODO: implement $1' });
  } catch (err) {
    handleError(err, this.logger, res);
  }
}
endsnippet

snippet Map "Creates a Map with the first set line"
const ${1:}Map = new Map();
$1Map.set('$2', $0);
endsnippet

snippet Transaction "Sets up a transaction with a try/catch"
const transaction = new Transaction($1);

try {
  await transaction.begin();

  $0

  await transaction.commit();
} catch (err) {
  transaction.rollback();
  throw err;
}
endsnippet
